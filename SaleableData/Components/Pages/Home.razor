@page "/"

<PageTitle>Data Step 2 </PageTitle>

<Div Class="flex h-screen w-full flex-col gap-3 bg-white p-3">
    <Div Class="flex flex-row gap-6 p-5">

        <Select TValue="String" SelectedValueChanged="SelectDatabases">
            <SelectItem Value="@("")">--Select Database--</SelectItem>
            @foreach (var item in stations)
            {
                <SelectItem Value="@item.Value">@item.Key</SelectItem>
            }
        </Select>
        <Autocomplete Data="Containers"
        TItem="ContainerModel"
        TValue="string"
        @ref="autocomplete"
        SelectedValueChanged="SelectContainer"
        Disabled="String.IsNullOrEmpty(SelectedDatabase)"
        TextField="(container)=>container.Name"
        ValueField="(container)=>container.Name"
        Immediate="true"
        FreeTyping
        Placeholder="Container Name"
        SearchBackground="Background.Body"
        SearchTextColor="TextColor.White"
        MinLength="0"
        CustomFilter="@(( item, searchValue ) => item.Name.ToLower().Contains( searchValue.ToLower()) || string.IsNullOrEmpty(searchValue))"
        Class="w-4 text-white">
        </Autocomplete>
    </Div>
    <Div class="flex flex-row gap-6 p-5">

        <DatePicker TValue="DateTime?" Disabled="String.IsNullOrEmpty(SelectedDatabase) || String.IsNullOrEmpty(Container)" @bind-Date="@FromDate" Placeholder="From Date" StaticPicker="false" />

        <DatePicker TValue="DateTime?"
        Disabled="String.IsNullOrEmpty(SelectedDatabase) || String.IsNullOrEmpty(Container) || FromDate is null"
        @bind-Date="@ToDate" Placeholder="To Date" StaticPicker="false" />
    </Div>

    <Div Class="flex w-full">
        <SumarryTable Data="SummaryData" />
    </Div>

    <Div Class="inline-block">

        <ApexChart  Options="chartOptions" TItem="SealableChartModel" @ref="chart"
        Title="Weight Transaction">


            <ApexPointSeries TItem="SealableChartModel"
            ShowDataLabels=true
            Items="ChartData"
            Name="Weight"
            SeriesType="SeriesType.Line"
            XValue="e => e.Date"
            YValue="e=> e.Weight" />
        </ApexChart>
    </Div></Div>
@code
{
    public required ApexChart<SealableChartModel> chart;
    private SummaryData? SummaryData= null;
    public required Autocomplete<ContainerModel,string> autocomplete;
    public ApexChartOptions<SealableChartModel> chartOptions = new()
        {
            Xaxis = new XAxis()
            {
                Type = XAxisType.Datetime,
                TickPlacement = TickPlacement.Between,
            },
            Stroke = new Stroke()
            {
                Show = true

            },
            Chart = new Chart()
            {
                Zoom = new Zoom()
                {
                    AllowMouseWheelZoom = true,
                    Enabled = true,
                    Type = AxisType.X,
                    AutoScaleYaxis = true
                }
            },
            DataLabels = new()
            {
                Enabled = true
            }
        };
    public Dictionary<string, string> stations = new();
    public List<TransactionModel> ListTransactions = new List<TransactionModel>();
    public string SelectedDatabase { get; set; } = string.Empty;
    public List<ContainerModel> Containers = [];
    private DateTime? fromdt, todt;
    public DateTime? FromDate
    {
        get => fromdt; set
        {
            fromdt = value;
            Check();
        }
    }
    public DateTime? ToDate
    {
        get => todt; set
        {
            todt = value;
            Check();
        }
    }
    private List<SealableChartModel> ChartData { get; set; } = new();
    [Inject]
    public required Step2DataService Service { get; set; }
    public string Container { get; set; } = string.Empty;

    protected override void OnAfterRender(bool isFirstRender)
    {
        stations = Service.GetStation();
    }

    async Task SelectDatabases(string text)
    {
        Containers.Clear();
        Container = string.Empty;
        FromDate = null;
        ToDate = null;
        SelectedDatabase = text;
        Service.Database = text;
        Containers = await Service.GetContainers();
    }
    public async Task SelectContainer(string text)
    {
        Container = text;
        await Check();
    }
    public async Task Check()
    {
        List<TransactionModel> data = new List<TransactionModel>();
        if (FromDate is not null && ToDate is not null)
        {
            await chart.ResetSeriesAsync(true, true);
            ListTransactions = await Service.GetTransaction(Container, FromDate.Value, ToDate.Value);
            var tr = ListTransactions.Where(x => x.Group_Id == 1);
            ChartData = tr.Select(x => new SealableChartModel() { Date = x.RecordDate.ToString("yyyy-MM-dd"), Weight = x.Weight }).ToList();
            var summaryData = SummaryData = new SummaryData(tr.ToList());
            chartOptions.Annotations = new Annotations()
            {
                Yaxis = [
                        new AnnotationsYAxis()
                        {
                            Y = summaryData.Q1,
                            Label = new ApexCharts.Label()
                            {
                                Text = $"Q1: {summaryData.Q1}"
                            },
                            BorderColor="#00E396",
                        },
                        new AnnotationsYAxis()
                        {
                            Y = summaryData.Q2,
                            Label = new ApexCharts.Label()
                            {
                                Text = $"Q2: {summaryData.Q2}"
                            },
                            BorderColor="#00E396"
                        },
                        new AnnotationsYAxis()
                        {
                            Y = summaryData.Q3,
                            Label = new ApexCharts.Label()
                            {
                                Text = $"Q3: {summaryData.Q3}"
                            },
                            BorderColor="#00E396"
                        },
                ],
                Points = [
                new AnnotationsPoint(){
                    X = summaryData.MinValue.RecordDate.ToString("dd MMM"),
                    Y = Convert.ToDouble(summaryData.MinValue.Weight),
                    Marker = new (){
                        Size=8,
                        Radius=3
                    },
                    Label = new(){
                       Text ="Min Value"
                    }
                },
                new AnnotationsPoint(){
                    X = summaryData.MaxValue.RecordDate.ToString("dd MMM"),
                    Y = Convert.ToDouble(summaryData.MaxValue.Weight),
                    Marker = new (){
                        Size=8,
                        Radius=3
                    },
                    Label = new(){
                       Text ="Max Value"
                    }
                }
                ]
            };
            // await InvokeAsync(StateHasChanged);
            // await chart.UpdateSeriesAsync(true);
            await InvokeAsync(StateHasChanged);
            await chart.UpdateOptionsAsync(true, true, true);
            await Task.Delay(100);
            await InvokeAsync(StateHasChanged);
        }
    }

}