@page "/"

<PageTitle>Data Step 2 </PageTitle>

<Div Class="flex h-screen w-full flex-col gap-3 bg-white p-3">
    <Div Class="flex flex-row gap-6 p-5">
        <Select TValue="String" SelectedValueChanged="SelectDatabases" >
        <SelectItem Value="@("")">--Select Database--</SelectItem>
            @foreach (var item in stations)
            {
                <SelectItem Value="@item.Value">@item.Key</SelectItem>
            }
        </Select>
        <Autocomplete Data="Containers"
        TItem="ContainerModel"
        TValue="string"
        SelectedValueChanged="SelectContainer"
        Disabled="String.IsNullOrEmpty(SelectedDatabase)"
        TextField="(container)=>container.Name"
        ValueField="(container)=>container.Name"
        Placeholder="Container Name"
        SearchBackground="Background.Body"
        SearchTextColor="TextColor.White"
         CustomFilter="@(( item, searchValue ) => item.Name.Contains( searchValue))"
    
        Class="w-4 text-white">
        </Autocomplete>
    </Div>
    <Div class="flex flex-row gap-8">

        <DatePicker TValue="DateTime?" Disabled="String.IsNullOrEmpty(SelectedDatabase) || String.IsNullOrEmpty(Container)" @bind-Date="@FromDate" Placeholder="From Date" StaticPicker="false" />

        <DatePicker TValue="DateTime?"
        Disabled="String.IsNullOrEmpty(SelectedDatabase) || String.IsNullOrEmpty(Container) || FromDate is null"
        @bind-Date="@ToDate" Placeholder="To Date" StaticPicker="false" />
    </Div>
    <LineChart @ref="lineChart"
    TItem="SealableChartModel" Options="@lineChartOptions">
        <ChartZoom TItem="SealableChartModel" Options="lineChartZoomOptions" />
    </LineChart>

</Div>
@code
{
    public required LineChart<SealableChartModel> lineChart;
    public Dictionary<string, string> stations = new();
    private ChartZoomPluginOptions lineChartZoomOptions = new()
        {
            Zoom = new()
            {
                Mode = "x",
                Wheel = new()
                {
                    Enabled = true,
                },
                Pinch = new()
                {
                    Enabled = true
                },
                Drag = new()
                {
                    Enabled = true
                }
            },
            Transition = new ChartZoomTransitionOptions()
            {
                Animation = new ChartAnimation()
                {
                    Duration = 1000,
                    Easing = "easeOutCubic"
                }
            }
        };
    public LineChartOptions lineChartOptions = new ()
    {
        Parsing = new ChartParsing
        {
            XAxisKey="date",
            YAxisKey="weight"
        },
            Scales = new ChartScales()
            {
                X = new ChartAxis()
                {
                    Display = true,
                    Type = "timeseries",
                    Time  = new ChartAxisTime(){
                        Parser = "yyyy-MM-dd",
                        Unit="day",
                        
                    },
                    Title = new ChartScaleTitle
                    {
                        Display = true,
                        Text = "Date"
                    }
                },
                Y = new ChartAxis()
                {
                    Display=true
                }
            }
    };
    public List<TransactionModel> ListTransactions = new List<TransactionModel>();
    public string SelectedDatabase { get; set; } = string.Empty;
    public List<ContainerModel> Containers = [];
    private DateTime? fromdt, todt;
    public DateTime? FromDate { get =>fromdt; set
        {
            fromdt = value;
            Check();
        }
    } 
    public DateTime? ToDate { get => todt; set
        {
            todt = value;
            Check();
        }
    }
    [Inject]
    public required Step2DataService Service { get; set; }
    public string Container { get; set; } = string.Empty;
    private List<string> backgroundColors = new() { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
    private List<string> borderColors = new() { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };

    protected override void OnAfterRender(bool isFirstRender)
    {
        stations = Service.GetStation();
    }

    async Task SelectDatabases(string text)
    {
        Containers.Clear();
        Container = string.Empty;
        FromDate = null;
        ToDate = null;
        SelectedDatabase = text;
        Service.Database = text;
        Containers = await Service.GetContainers();
    }
    public async  Task SelectContainer(string text)
    {
        Container   = text;
        await Check();
    }
    public async Task Check()
    {
        List<TransactionModel> data = new List<TransactionModel>();
        if (FromDate is not null && ToDate is not null)
        {
            ListTransactions = await Service.GetTransaction(Container,FromDate.Value,ToDate.Value);
            await lineChart.Clear();
            await lineChart.AddDatasetsAndUpdate(GetLineChartDataset(ListTransactions.Where(x=>x.Group_Id==1).ToList()));
        }
    }
    private LineChartDataset<SealableChartModel> GetLineChartDataset(List<TransactionModel> data)
    {
        return new()
            {
                Label = $"# of Transaction weight in Scales of {data.FirstOrDefault()?.Scales ?? ""}",
                Data = data.Select(x=>new SealableChartModel() { Weight = x.Weight, Date = x.RecordDate.ToString("yyyy-MM-dd") }).ToList(),
                BackgroundColor = backgroundColors[0], // line chart can only have one color
                BorderColor = borderColors[0],
                BorderWidth = 1
            };
    }

}